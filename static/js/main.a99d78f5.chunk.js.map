{"version":3,"sources":["utils/fetchClient.ts","types/Error.ts","api/posts.ts","utils/switchError.ts","components/UserSelector/UserSelector.tsx","api/users.ts","components/ErrorNotification/ErrorNotification.tsx","components/PostsList/PostsList.tsx","components/Loader/Loader.tsx","components/Content/Content.tsx","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","components/Sidebar/Sidebar.tsx","App.tsx","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","a","method","data","options","body","JSON","stringify","headers","fetch","response","json","Error","client","getPostsByUserId","userId","switchError","type","NO_POSTS","GET_USERS","GET_POSTS","GET_COMMENTS","ADD_COMMENT","DELETE_COMMENT","UserSelector","selectedUserId","onSelectUser","onError","useState","users","setUsers","selectedUser","setSelectedUser","isDropdown","setIsDropdown","userListDropdown","useRef","handleOnBlur","event","current","contains","target","useEffect","then","catch","document","addEventListener","removeEventListener","className","classNames","ref","onClick","id","role","length","map","user","href","name","handleSelectUser","ErrorNotification","error","errorType","errorStyle","handleNotification","PostsList","posts","postId","onPost","post","title","Loader","Content","isLoading","getCommentsByPostId","deleteComment","commentId","NewCommentForm","onAdd","setName","email","setEmail","setBody","setIsLoading","isSubmitted","setIsSubmitted","isValid","setIsValid","handleCreateComment","newComment","onSubmit","preventDefault","handleSubmit","htmlFor","placeholder","value","onChange","PostDetails","comments","setComments","isCommentForm","setIsCommentForm","currentPost","filter","handleAddComment","useCallback","allComments","handleDeleteComment","comment","getCommentList","commentList","Sidebar","App","setPosts","setPostId","setSelectedUserId","setError","handleError","handleOnPost","getPostList","postList","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.a99d78f5.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nasync function request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: unknown = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  await wait(300);\n  const response = await fetch(BASE_URL + url, options);\n\n  return response.json();\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: unknown) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: unknown) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","export enum Error {\n  GET_USERS = 'Unable to get users',\n  NO_POSTS = 'No posts yet',\n  GET_POSTS = 'Something went wrong!',\n  GET_COMMENTS = 'Unable to get comments',\n  ADD_COMMENT = 'Unable to add comment',\n  DELETE_COMMENT = 'Unable to delete comment',\n}\n\nexport type ErrorType = 'NoPostsYet' | 'PostsLoadingError' | 'CommentsError';\n\nexport type ErrorStyle = 'is-warning' | 'is-danger';\n","import { client } from '../utils/fetchClient';\nimport { Post } from '../types/Post';\n\nexport const getPostsByUserId = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const getPostById = (postId: number) => {\n  return client.get<Post>(`/posts/${postId}`);\n};\n","import { Error } from '../types/Error';\n\nexport const switchError = (type: Error) => {\n  switch (type) {\n    case Error.NO_POSTS:\n      return 'NoPostsYet';\n\n    case Error.GET_USERS:\n    case Error.GET_POSTS:\n      return 'PostsLoadingError';\n\n    case Error.GET_COMMENTS:\n    case Error.ADD_COMMENT:\n    case Error.DELETE_COMMENT:\n      return 'CommentsError';\n\n    default:\n      return null;\n  }\n};\n","import React, {\n  useState,\n  useRef,\n  useEffect,\n} from 'react';\nimport classNames from 'classnames';\nimport { getUsers } from '../../api/users';\nimport { User } from '../../types/User';\nimport { Error } from '../../types/Error';\n\ntype Props = {\n  selectedUserId: number | null;\n  onSelectUser: (userId: number) => void;\n  onError: (error: Error | null) => void;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  selectedUserId,\n  onSelectUser,\n  onError,\n}) => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<string | null>(null);\n  const [isDropdown, setIsDropdown] = useState(false);\n\n  const userListDropdown = useRef<HTMLDivElement>(null);\n\n  const handleOnBlur = (event: MouseEvent) => {\n    if (userListDropdown.current\n      && !userListDropdown.current.contains(event.target as HTMLElement)) {\n      setIsDropdown(false);\n    }\n  };\n\n  const handleSelectUser = (user: User) => {\n    const { name, id } = user;\n\n    setSelectedUser(name);\n    onSelectUser(id);\n    setIsDropdown(false);\n  };\n\n  useEffect(() => {\n    getUsers()\n      .then(setUsers)\n      .catch(() => onError(Error.GET_USERS));\n  }, []);\n\n  useEffect(() => {\n    document.addEventListener('click', handleOnBlur);\n\n    return () => {\n      document.removeEventListener('click', handleOnBlur);\n    };\n  }, [isDropdown]);\n\n  return (\n    <div\n      className=\"block\"\n    >\n      <div\n        data-cy=\"UserSelector\"\n        className={classNames(\n          'dropdown',\n          { 'is-active': isDropdown },\n        )}\n        ref={userListDropdown}\n      >\n        <div className=\"dropdown-trigger\">\n          <button\n            type=\"button\"\n            className=\"button\"\n            aria-haspopup=\"true\"\n            aria-controls=\"dropdown-menu\"\n            onClick={() => setIsDropdown(!isDropdown)}\n          >\n            <span>\n              {!selectedUserId\n                ? 'Choose a user'\n                : `${selectedUser}`}\n            </span>\n\n            <span className=\"icon is-small\">\n              <i\n                className=\"fas fa-angle-down\"\n                aria-hidden=\"true\"\n              />\n            </span>\n          </button>\n        </div>\n\n        <div\n          className=\"dropdown-menu\"\n          id=\"dropdown-menu\"\n          role=\"menu\"\n        >\n          <div\n            className=\"dropdown-content\"\n          >\n            {users.length > 0 && (\n              users.map(user => (\n                <a\n                  href={`#user-${user.id}`}\n                  className={classNames(\n                    'dropdown-item',\n                    { 'is-active': user.id === selectedUserId },\n                  )}\n                  key={user.id}\n                  onClick={() => handleSelectUser(user)}\n                >\n                  {user.name}\n                </a>\n              ))\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { client } from '../utils/fetchClient';\nimport { User } from '../types/User';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import React from 'react';\nimport { switchError } from '../../utils/switchError';\nimport { Error, ErrorStyle } from '../../types/Error';\n\ntype Props = {\n  error: Error | null;\n};\n\nexport const ErrorNotification: React.FC<Props> = ({ error }) => {\n  const handleNotification = (type: Error) => {\n    const errorType = switchError(type);\n\n    const errorStyle: ErrorStyle = (errorType === 'NoPostsYet')\n      ? 'is-warning'\n      : 'is-danger';\n\n    return (\n      <div\n        className={`notification ${errorStyle}`}\n        data-cy={errorType}\n      >\n        {error}\n      </div>\n    );\n  };\n\n  return (\n    <>\n      {error\n        && handleNotification(error)}\n    </>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../../types/Post';\n\ntype Props = {\n  posts: Post[];\n  postId: number | null;\n  onPost: (id: number | null) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  postId,\n  onPost,\n}) => {\n  const handleSetOpened = (id: number) => {\n    return (postId !== id)\n      ? onPost(id)\n      : onPost(null);\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">\n        Posts:\n      </p>\n\n      <table\n        className=\"\n        table\n        is-fullwidth\n        is-striped\n        is-hoverable\n        is-narrow\"\n      >\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <tr\n              data-cy=\"Post\"\n              key={post.id}\n            >\n              <td data-cy=\"PostId\">\n                {post.id}\n              </td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames(\n                    'button',\n                    'is-link',\n                    { 'is-light': !(postId && post.id === postId) },\n                  )}\n                  onClick={() => handleSetOpened(post.id)}\n                >\n                  {postId && post.id === postId\n                    ? 'Close'\n                    : 'Open'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport { switchError } from '../../utils/switchError';\nimport { UserSelector } from '../UserSelector';\nimport { ErrorNotification } from '../ErrorNotification';\nimport { PostsList } from '../PostsList';\nimport { Loader } from '../Loader';\nimport { Post } from '../../types/Post';\nimport { Error } from '../../types/Error';\n\ntype Props = {\n  posts: Post[];\n  postId: number | null;\n  selectedUserId: number | null;\n  error: Error | null;\n  isLoading: boolean;\n  onPost: (id: number | null) => void;\n  onSelectUser: (userId: number) => void;\n  onError: (error: Error | null) => void;\n};\n\nexport const Content: React.FC<Props> = ({\n  posts,\n  postId,\n  selectedUserId,\n  error,\n  isLoading,\n  onPost,\n  onSelectUser,\n  onError,\n}) => (\n  <div className=\"tile is-parent\">\n    <div\n      className=\"\n        tile\n        is-child\n        box\n        is-success\"\n    >\n\n      <UserSelector\n        selectedUserId={selectedUserId}\n        onSelectUser={onSelectUser}\n        onError={onError}\n      />\n\n      <div className=\"block\" data-cy=\"MainContent\">\n        {!selectedUserId\n          && !error\n          && (\n            <p data-cy=\"NoSelectedUser\">\n              No user selected\n            </p>\n          )}\n\n        {error\n          && error !== Error.NO_POSTS\n          && switchError(error) === 'PostsLoadingError'\n          && (\n            <ErrorNotification\n              error={error}\n            />\n          )}\n\n        {!posts?.length\n          && selectedUserId\n          && error === Error.NO_POSTS && (\n          <ErrorNotification\n            error={error}\n          />\n        )}\n\n        {isLoading\n          && <Loader />}\n\n        {!isLoading\n          && posts.length > 0\n          && !error\n          && (\n            <PostsList\n              posts={posts}\n              postId={postId}\n              onPost={onPost}\n            />\n          )}\n      </div>\n    </div>\n  </div>\n);\n","import { client } from '../utils/fetchClient';\nimport { Comment } from '../types/Comment';\n\nexport const getCommentsByPostId = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const createComment = (data: Omit<Comment, 'id'>) => {\n  return client.post<Comment>('/comments', data);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import React, { useState, FormEvent } from 'react';\nimport classNames from 'classnames';\nimport { createComment } from '../../api/comments';\nimport { Error } from '../../types/Error';\n\ntype Props = {\n  postId: number | null;\n  onAdd: (comment: {}) => void;\n  onError: (error: Error | null) => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  postId,\n  onAdd,\n  onError,\n}) => {\n  const [name, setName] = useState<string>('');\n  const [email, setEmail] = useState<string>('');\n  const [body, setBody] = useState<string>('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [isValid, setIsValid] = useState(false);\n\n  const handleCreateComment = async () => {\n    try {\n      setIsLoading(true);\n      onError(null);\n\n      if (!postId) {\n        return;\n      }\n\n      const newComment = await createComment({\n        postId, name, email, body,\n      });\n\n      onAdd(newComment);\n      setName(newComment.name);\n      setEmail(newComment.email);\n    } catch {\n      onError(Error.ADD_COMMENT);\n    } finally {\n      setIsLoading(false);\n      setIsSubmitted(false);\n      setBody('');\n    }\n  };\n\n  const handleFormValidation = () => {\n    setIsSubmitted(true);\n\n    return (!name || !email || !body)\n      ? setIsValid(false)\n      : setIsValid(true);\n  };\n\n  const handleClearForm = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n    onError(null);\n    setIsSubmitted(false);\n  };\n\n  const handleNotification = (length: number) => {\n    return isSubmitted && !length;\n  };\n\n  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!isValid) {\n      return;\n    }\n\n    handleCreateComment();\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={(event) => handleSubmit(event)}\n    >\n      <div\n        className=\"field\"\n        data-cy=\"NameField\"\n      >\n        <label\n          className=\"label\"\n          htmlFor=\"comment-author-name\"\n        >\n          Author Name\n        </label>\n\n        <div\n          className=\"\n            control\n            has-icons-left\n            has-icons-right\"\n        >\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              { 'is-danger': handleNotification(name.length) },\n            )}\n            value={name}\n            onChange={(event) => setName(event.target.value)}\n          />\n\n          <span\n            className=\"\n              icon\n              is-small\n              is-left\"\n          >\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {handleNotification(name.length) && (\n            <span\n              className=\"icon\n                is-small\n                is-right\n                has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {handleNotification(name.length) && (\n          <p\n            className=\"help is-danger\"\n            data-cy=\"ErrorMessage\"\n          >\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div\n        className=\"field\"\n        data-cy=\"EmailField\"\n      >\n        <label\n          className=\"label\"\n          htmlFor=\"comment-author-email\"\n        >\n          Author Email\n        </label>\n\n        <div\n          className=\"\n            control\n            has-icons-left\n            has-icons-right\"\n        >\n          <input\n            type=\"email\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input',\n              { 'is-danger': handleNotification(email.length) },\n            )}\n            value={email}\n            onChange={(event) => setEmail(event.target.value)}\n          />\n\n          <span\n            className=\"\n              icon\n              is-small\n              is-left\"\n          >\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {handleNotification(email.length) && (\n            <span\n              className=\"icon\n                is-small\n                is-right\n                has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {handleNotification(email.length) && (\n          <p\n            className=\"help is-danger\"\n            data-cy=\"ErrorMessage\"\n          >\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div\n        className=\"field\"\n        data-cy=\"BodyField\"\n      >\n        <label\n          className=\"label\"\n          htmlFor=\"comment-body\"\n        >\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea',\n              { 'is-danger': handleNotification(body.length) },\n            )}\n            value={body}\n            onChange={(event) => setBody(event.target.value)}\n          />\n        </div>\n\n        {handleNotification(body.length) && (\n          <p\n            className=\"help is-danger\"\n            data-cy=\"ErrorMessage\"\n          >\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button',\n              'is-link',\n              { 'is-loading': isLoading },\n            )}\n            onClick={() => handleFormValidation()}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"\n              button\n              is-link\n              is-light\"\n            aria-label=\"resetButton\"\n            onClick={() => handleClearForm()}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, {\n  useState,\n  useCallback,\n  useEffect,\n} from 'react';\nimport {\n  getCommentsByPostId,\n  deleteComment,\n} from '../../api/comments';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { Loader } from '../Loader';\nimport { ErrorNotification } from '../ErrorNotification';\nimport { Post } from '../../types/Post';\nimport { Comment } from '../../types/Comment';\nimport { Error } from '../../types/Error';\n\ntype Props = {\n  posts: Post[];\n  postId: number | null;\n  error: Error | null;\n  onError: (error: Error | null) => void;\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  posts,\n  postId,\n  error,\n  onError,\n}) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isCommentForm, setIsCommentForm] = useState(false);\n\n  const currentPost = posts.filter(post => post.id === postId)[0];\n\n  const handleAddComment = useCallback((newComment) => {\n    setComments(allComments => [...allComments, newComment]);\n  }, []);\n\n  const handleDeleteComment = async (commentId: number) => {\n    try {\n      setComments(\n        allComments => allComments.filter(\n          comment => comment.id !== commentId,\n        ),\n      );\n      onError(null);\n\n      if (!commentId) {\n        return;\n      }\n\n      await deleteComment(commentId);\n    } catch {\n      onError(Error.DELETE_COMMENT);\n    }\n  };\n\n  const getCommentList = async (id: number | null) => {\n    try {\n      setIsLoading(true);\n      onError(null);\n      setIsCommentForm(false);\n\n      if (!id) {\n        return;\n      }\n\n      const commentList = await getCommentsByPostId(id);\n\n      setComments(commentList);\n    } catch {\n      onError(Error.GET_COMMENTS);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (postId) {\n      getCommentList(postId);\n    }\n  }, [postId]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        {posts.length && (\n          <div className=\"block\">\n            <h2 data-cy=\"PostTitle\">\n              {`#${currentPost.id}: ${currentPost.title}`}\n            </h2>\n\n            <p data-cy=\"PostBody\">\n              {currentPost.body}\n            </p>\n          </div>\n        )}\n\n        <div className=\"block\">\n          {isLoading\n            && <Loader />}\n\n          {!isLoading\n            && !comments.length\n            && !error\n            && (\n              <p\n                className=\"title is-4\"\n                data-cy=\"NoCommentsMessage\"\n              >\n                No comments yet\n              </p>\n            )}\n\n          {!isLoading\n            && error\n            && (\n              <ErrorNotification\n                error={error}\n              />\n            )}\n\n          {!isLoading\n            && comments.length > 0\n            && !error\n            && (\n              <p className=\"title is-4\">\n                Comments:\n              </p>\n            )}\n\n          {!isLoading\n            && !error\n            && comments.map(comment => (\n              <article\n                key={comment.id}\n                className=\"message is-small\"\n                data-cy=\"Comment\"\n              >\n                <div className=\"message-header\">\n                  <a\n                    href={`mailto:${comment.email}`}\n                    data-cy=\"CommentAuthor\"\n                  >\n                    {comment.name}\n                  </a>\n                  <button\n                    data-cy=\"CommentDelete\"\n                    type=\"button\"\n                    className=\"delete is-small\"\n                    aria-label=\"delete\"\n                    onClick={() => handleDeleteComment(comment.id)}\n                  >\n                    delete button\n                  </button>\n                </div>\n\n                <div\n                  className=\"message-body\"\n                  data-cy=\"CommentBody\"\n                >\n                  {comment.body}\n                </div>\n              </article>\n            ))}\n\n          {!isLoading\n            && !isCommentForm\n            && !error\n            && (\n              <button\n                data-cy=\"WriteCommentButton\"\n                type=\"button\"\n                className=\"button is-link\"\n                aria-label=\"WriteCommentButton\"\n                onClick={() => setIsCommentForm(true)}\n              >\n                Write a comment\n              </button>\n            )}\n        </div>\n\n        {isCommentForm\n          && (\n            <NewCommentForm\n              postId={postId}\n              onAdd={handleAddComment}\n              onError={onError}\n            />\n          )}\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { PostDetails } from '../PostDetails';\nimport { Post } from '../../types/Post';\nimport { Error } from '../../types/Error';\n\ntype Props = {\n  posts: Post[];\n  postId: number | null;\n  error: Error | null;\n  onError: (error: Error | null) => void;\n};\n\nexport const Sidebar: React.FC<Props> = ({\n  posts,\n  postId,\n  error,\n  onError,\n}) => (\n  <div\n    data-cy=\"Sidebar\"\n    className={classNames(\n      'tile',\n      'is-parent',\n      'is-8-desktop',\n      'Sidebar',\n      { 'Sidebar--open': postId },\n    )}\n  >\n    <div\n      className=\"\n        tile\n        is-child\n        box\n        is-success\"\n    >\n      {postId && (\n        <PostDetails\n          posts={posts}\n          postId={postId}\n          error={error}\n          onError={onError}\n        />\n      )}\n    </div>\n  </div>\n);\n","import React, {\n  useState,\n  useEffect,\n  useCallback,\n} from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\nimport { getPostsByUserId } from './api/posts';\nimport { Content } from './components/Content';\nimport { Sidebar } from './components/Sidebar';\nimport { Post } from './types/Post';\nimport { Error } from './types/Error';\n\nexport const App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [postId, setPostId] = useState<number | null>(null);\n  const [selectedUserId, setSelectedUserId] = useState<number | null>(null);\n  const [error, setError] = useState<Error | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleError = useCallback((errorType: Error | null) => {\n    setError(errorType);\n  }, []);\n\n  const handleOnPost = useCallback((id: number | null) => {\n    setPostId(id);\n  }, []);\n\n  const handleSelectUser = useCallback((userId: number) => {\n    setSelectedUserId(userId);\n    setPostId(null);\n  }, []);\n\n  const getPostList = async (userId: number) => {\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      if (!userId) {\n        return;\n      }\n\n      const postList = await getPostsByUserId(userId);\n\n      if (!postList.length) {\n        setError(Error.NO_POSTS);\n      }\n\n      setPosts(postList);\n    } catch {\n      setError(Error.GET_POSTS);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (selectedUserId) {\n      getPostList(selectedUserId);\n    }\n  }, [selectedUserId]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <Content\n            posts={posts}\n            postId={postId}\n            selectedUserId={selectedUserId}\n            error={error}\n            isLoading={isLoading}\n            onPost={handleOnPost}\n            onSelectUser={handleSelectUser}\n            onError={handleError}\n          />\n\n          <Sidebar\n            posts={posts}\n            postId={postId}\n            error={error}\n            onError={handleError}\n          />\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}